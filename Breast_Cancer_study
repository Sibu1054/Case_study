print("1. Importing Libraries...")
import pandas as pd
import numpy as np
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
print("   Libraries imported successfully.\n")

print("2. Loading Dataset (Breast Cancer Wisconsin)...")

cancer = load_breast_cancer(as_frame=True)
df = cancer.frame
print(f"   Dataset loaded successfully. Shape: {df.shape}")
print("\n   Dataset Head:")
print(df.head())
print("\n   Dataset Info:")
df.info()
print("\n   Dataset Description:")
print(df.describe())

print("\n   Checking for missing values:")
print(df.isnull().sum())
print("   No missing values found.\n")


print("3. Preparing Data...")
# Separate features (X) and target variable (y)
X = df.drop('target', axis=1) # All columns except the target
y = df['target']              # The target column (0: malignant, 1: benign)

print(f"   Features shape: {X.shape}")
print(f"   Target shape: {y.shape}")
print(f"   Target value counts:\n{y.value_counts()}") 


print("\n   Splitting data into Train and Test sets (80/20)...")
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
print(f"   X_train shape: {X_train.shape}, X_test shape: {X_test.shape}")
print(f"   y_train shape: {y_train.shape}, y_test shape: {y_test.shape}")


print("\n   Applying Feature Scaling (StandardScaler)...")
scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)

X_test_scaled = scaler.transform(X_test)
print("   Scaling complete.\n")

print("4. Training Models...")

#Logistic Regression
print("   Training Logistic Regression...")
log_reg = LogisticRegression(random_state=42, max_iter=10000)
log_reg.fit(X_train_scaled, y_train)
print("   Logistic Regression training complete.")

#Random Forest Classifier
print("\n   Training Random Forest Classifier...")
rf_clf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')

rf_clf.fit(X_train_scaled, y_train) 
print("   Random Forest training complete.\n")

#Model Evaluation
print("5. Evaluating Models on Test Set...")

print("--- Logistic Regression Evaluation ---")
y_pred_log_reg = log_reg.predict(X_test_scaled)
accuracy_log_reg = accuracy_score(y_test, y_pred_log_reg)
print(f"Accuracy: {accuracy_log_reg:.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred_log_reg, target_names=cancer.target_names))
print("\nConfusion Matrix:")
cm_log_reg = confusion_matrix(y_test, y_pred_log_reg)
print(cm_log_reg)

print("\n--- Random Forest Evaluation ---")
y_pred_rf = rf_clf.predict(X_test_scaled)
accuracy_rf = accuracy_score(y_test, y_pred_rf)
print(f"Accuracy: {accuracy_rf:.4f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred_rf, target_names=cancer.target_names))
print("\nConfusion Matrix:")
cm_rf = confusion_matrix(y_test, y_pred_rf)
print(cm_rf)
print("\nEvaluation complete.\n")

print("6. Visualizing Confusion Matrices...")

plt.figure(figsize=(12, 5))

# Logistic Regression Confusion Matrix
plt.subplot(1, 2, 1)
sns.heatmap(cm_log_reg, annot=True, fmt='d', cmap='Blues',
            xticklabels=cancer.target_names, yticklabels=cancer.target_names)
plt.title('Logistic Regression Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

# Random Forest Confusion Matrix
plt.subplot(1, 2, 2) 
sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Greens',
            xticklabels=cancer.target_names, yticklabels=cancer.target_names)
plt.title('Random Forest Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

plt.tight_layout() 
plt.show()
print("   Visualization complete. Check the plot window(s).\n")

print("--- Project Execution Finished ---")
